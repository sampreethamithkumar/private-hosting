AWSTemplateFormatVersion: 2010-09-09
Description: React App private hosting

Parameters:  
  PrefixName:
    Type: String

  DockerRegistoryHost:
    Type: String

  DockerImage:
    Type: String
    
Resources:
  PrivateVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags: 
        - Key: Name
          Value: !Sub ${PrefixName}-Vpc
  
  PrivateSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: "10.0.1.0/24"
      VpcId: !Ref PrivateVpc
      # TODO: Change AZ based on your zone
      AvailabilityZone: ap-southeast-2a
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName}-SubnetAz1
  
  PrivateSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: "10.0.2.0/24"
      VpcId: !Ref PrivateVpc
      # TODO: Change AZ based on your zone
      AvailabilityZone: ap-southeast-2b
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName}-SubnetAz2

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PrivateVpc
      Tags:
        - Key: Name
          Value: !Sub ${PrefixName}-RouteTable

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PrivateSubnetAz1

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PrivateSubnetAz2

  ecsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${PrefixName}-TaskDefinitionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ecsTaskPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP request
      GroupName: !Sub ${PrefixName}-SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
      VpcId: !Ref PrivateVpc

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${PrefixName}-Cluster
      ClusterSettings: 
        - Name: containerInsights
          Value: enabled
  
  ClusterService:
    Type: AWS::ECS::Service
    DependsOn: Listener80
    Properties:
      LaunchType: FARGATE
      ServiceName: !Sub ${PrefixName}-ClusterService
      Cluster: !GetAtt Cluster.Arn
      TaskDefinition: !Ref ClusterTaskDefinition
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !GetAtt SecurityGroup.GroupId
          Subnets: 
            - !Ref PrivateSubnetAz1
            - !Ref PrivateSubnetAz2
      LoadBalancers:
        - TargetGroupArn: !Ref EcsTargetGroup
          ContainerPort: 80
          ContainerName: !Sub ${PrefixName}-Container
  
  ClusterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Memory: 2048
      Cpu: 1024
      ContainerDefinitions:
        - Name: !Sub ${PrefixName}-Container
          Image: !Sub ${DockerRegistoryHost}/${DockerImage}
          PortMappings:
          - ContainerPort: 80
      ExecutionRoleArn: !GetAtt ecsTaskRole.Arn
      RequiresCompatibilities: 
        - FARGATE
      NetworkMode: awsvpc
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${PrefixName}-LoadBalancer
      SecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      Subnets: 
        - !Ref PrivateSubnetAz1
        - !Ref PrivateSubnetAz2
      Scheme: internal
  
  Listener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EcsTargetGroup

  EcsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${PrefixName}-tg
      TargetType: ip
      HealthCheckEnabled: true
      VpcId: !Ref PrivateVpc
      IpAddressType: ipv4
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'